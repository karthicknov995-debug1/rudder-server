// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/services/streammanager/firehose (interfaces: FireHoseClient)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/services/streammanager/firehose/mock_eventbride.go -package mock_eventbride github.com/rudderlabs/rudder-server/services/streammanager/firehose FireHoseClient
//

// Package mock_eventbride is a generated GoMock package.
package mock_eventbride

import (
	context "context"
	reflect "reflect"

	firehose "github.com/aws/aws-sdk-go-v2/service/firehose"
	gomock "go.uber.org/mock/gomock"
)

// MockFireHoseClient is a mock of FireHoseClient interface.
type MockFireHoseClient struct {
	ctrl     *gomock.Controller
	recorder *MockFireHoseClientMockRecorder
	isgomock struct{}
}

// MockFireHoseClientMockRecorder is the mock recorder for MockFireHoseClient.
type MockFireHoseClientMockRecorder struct {
	mock *MockFireHoseClient
}

// NewMockFireHoseClient creates a new mock instance.
func NewMockFireHoseClient(ctrl *gomock.Controller) *MockFireHoseClient {
	mock := &MockFireHoseClient{ctrl: ctrl}
	mock.recorder = &MockFireHoseClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFireHoseClient) EXPECT() *MockFireHoseClientMockRecorder {
	return m.recorder
}

// PutRecord mocks base method.
func (m *MockFireHoseClient) PutRecord(ctx context.Context, input *firehose.PutRecordInput, opts ...func(*firehose.Options)) (*firehose.PutRecordOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutRecord", varargs...)
	ret0, _ := ret[0].(*firehose.PutRecordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRecord indicates an expected call of PutRecord.
func (mr *MockFireHoseClientMockRecorder) PutRecord(ctx, input any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRecord", reflect.TypeOf((*MockFireHoseClient)(nil).PutRecord), varargs...)
}
